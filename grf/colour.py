from typing import Any

import numpy as np
import spectra  # TODO remove in favor of oklab stuff
from PIL import Image


PIL_PALETTE = (0, 0, 255, 16, 16, 16, 32, 32, 32, 48, 48, 48, 64, 64, 64, 80, 80, 80, 100, 100, 100, 116, 116, 116, 132, 132, 132, 148, 148, 148, 168, 168, 168, 184, 184, 184, 200, 200, 200, 216, 216, 216, 232, 232, 232, 252, 252, 252, 52, 60, 72, 68, 76, 92, 88, 96, 112, 108, 116, 132, 132, 140, 152, 156, 160, 172, 176, 184, 196, 204, 208, 220, 48, 44, 4, 64, 60, 12, 80, 76, 20, 96, 92, 28, 120, 120, 64, 148, 148, 100, 176, 176, 132, 204, 204, 168, 72, 44, 4, 88, 60, 20, 104, 80, 44, 124, 104, 72, 152, 132, 92, 184, 160, 120, 212, 188, 148, 244, 220, 176, 64, 0, 4, 88, 4, 16, 112, 16, 32, 136, 32, 52, 160, 56, 76, 188, 84, 108, 204, 104, 124, 220, 132, 144, 236, 156, 164, 252, 188, 192, 252, 208, 0, 252, 232, 60, 252, 252, 128, 76, 40, 0, 96, 60, 8, 116, 88, 28, 136, 116, 56, 156, 136, 80, 176, 156, 108, 196, 180, 136, 68, 24, 0, 96, 44, 4, 128, 68, 8, 156, 96, 16, 184, 120, 24, 212, 156, 32, 232, 184, 16, 252, 212, 0, 252, 248, 128, 252, 252, 192, 32, 4, 0, 64, 20, 8, 84, 28, 16, 108, 44, 28, 128, 56, 40, 148, 72, 56, 168, 92, 76, 184, 108, 88, 196, 128, 108, 212, 148, 128, 8, 52, 0, 16, 64, 0, 32, 80, 4, 48, 96, 4, 64, 112, 12, 84, 132, 20, 104, 148, 28, 128, 168, 44, 28, 52, 24, 44, 68, 32, 60, 88, 48, 80, 104, 60, 104, 124, 76, 128, 148, 92, 152, 176, 108, 180, 204, 124, 16, 52, 24, 32, 72, 44, 56, 96, 72, 76, 116, 88, 96, 136, 108, 120, 164, 136, 152, 192, 168, 184, 220, 200, 32, 24, 0, 56, 28, 0, 72, 40, 4, 88, 52, 12, 104, 64, 24, 124, 84, 44, 140, 108, 64, 160, 128, 88, 76, 40, 16, 96, 52, 24, 116, 68, 40, 136, 84, 56, 164, 96, 64, 184, 112, 80, 204, 128, 96, 212, 148, 112, 224, 168, 128, 236, 188, 148, 80, 28, 4, 100, 40, 20, 120, 56, 40, 140, 76, 64, 160, 100, 96, 184, 136, 136, 36, 40, 68, 48, 52, 84, 64, 64, 100, 80, 80, 116, 100, 100, 136, 132, 132, 164, 172, 172, 192, 212, 212, 224, 40, 20, 112, 64, 44, 144, 88, 64, 172, 104, 76, 196, 120, 88, 224, 140, 104, 252, 160, 136, 252, 188, 168, 252, 0, 24, 108, 0, 36, 132, 0, 52, 160, 0, 72, 184, 0, 96, 212, 24, 120, 220, 56, 144, 232, 88, 168, 240, 128, 196, 252, 188, 224, 252, 16, 64, 96, 24, 80, 108, 40, 96, 120, 52, 112, 132, 80, 140, 160, 116, 172, 192, 156, 204, 220, 204, 240, 252, 172, 52, 52, 212, 52, 52, 252, 52, 52, 252, 100, 88, 252, 144, 124, 252, 184, 160, 252, 216, 200, 252, 244, 236, 72, 20, 112, 92, 44, 140, 112, 68, 168, 140, 100, 196, 168, 136, 224, 200, 176, 248, 208, 184, 255, 232, 208, 252, 60, 0, 0, 92, 0, 0, 128, 0, 0, 160, 0, 0, 196, 0, 0, 224, 0, 0, 252, 0, 0, 252, 80, 0, 252, 108, 0, 252, 136, 0, 252, 164, 0, 252, 192, 0, 252, 220, 0, 252, 252, 0, 204, 136, 8, 228, 144, 4, 252, 156, 0, 252, 176, 48, 252, 196, 100, 252, 216, 152, 8, 24, 88, 12, 36, 104, 20, 52, 124, 28, 68, 140, 40, 92, 164, 56, 120, 188, 72, 152, 216, 100, 172, 224, 92, 156, 52, 108, 176, 64, 124, 200, 76, 144, 224, 92, 224, 244, 252, 200, 236, 248, 180, 220, 236, 132, 188, 216, 88, 152, 172, 244, 0, 244, 245, 0, 245, 246, 0, 246, 247, 0, 247, 248, 0, 248, 249, 0, 249, 250, 0, 250, 251, 0, 251, 252, 0, 252, 253, 0, 253, 254, 0, 254, 255, 0, 255, 76, 24, 8, 108, 44, 24, 144, 72, 52, 176, 108, 84, 210, 146, 126, 252, 60, 0, 252, 84, 0, 252, 104, 0, 252, 124, 0, 252, 148, 0, 252, 172, 0, 252, 196, 0, 64, 0, 0, 255, 0, 0, 48, 48, 0, 64, 64, 0, 80, 80, 0, 255, 255, 0, 32, 68, 112, 36, 72, 116, 40, 76, 120, 44, 80, 124, 48, 84, 128, 72, 100, 144, 100, 132, 168, 216, 244, 252, 96, 128, 164, 68, 96, 140, 255, 255, 255)
PALETTE = [tuple(PIL_PALETTE[3 * i: 3 * i + 3]) for i in range(256)]
SAFE_COLOURS = tuple(range(1, 0xD7))
ALL_COLOURS = tuple(range(256))
WATER_COLOURS = tuple(range(0xF5, 0xFF))
DEFAULT_BRIGHTNESS = 128  # RGB brightness used to pass masked colour without adjustment


CC_COLOURS = [
    [198 , 199 , 200 , 201 , 202 , 203 , 204 , 205 ],
    [96 , 97 , 98 , 99 , 100 , 101 , 102 , 103 ],
    [42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 ],
    [62 , 63 , 64 , 65 , 66 , 67 , 68 , 69 ],
    [179 , 180 , 181 , 182 , 183 , 164 , 165 , 166 ],
    [154 , 155 , 156 , 157 , 158 , 159 , 160 , 161 ],
    [82 , 83 , 84 , 85 , 206 , 207 , 208 , 209 ],
    [88 , 89 , 90 , 91 , 92 , 93 , 94 , 95 ],
    [146 , 147 , 148 , 149 , 150 , 151 , 152 , 153 ],
    [114 , 115 , 116 , 117 , 118 , 119 , 120 , 121 ],
    [128 , 129 , 130 , 131 , 132 , 133 , 134 , 135 ],
    [136 , 137 , 138 , 139 , 140 , 141 , 142 , 143 ],
    [64 , 192 , 193 , 194 , 195 , 196 , 197 , 39 ],
    [32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 ],
    [4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ],
    [8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 ]
]

WIN_TO_DOS = [
      0,   1,   2,   3,   4,   5,   6,   7,
      8,   9,  10,  11,  12,  13,  14,  15,
     16,  17,  18,  19,  20,  21,  22,  23,
     24,  25,  26,  27,  28,  29,  30,  31,
      6,   7,  34,  35,  36,  37,  38,  39,
      8,  41,  42,  43,  44,  45,  46,  47,
     48,  49,  50,  51,  52,  53,  54,  55,
     56,  57,  58,  59,  60,  61,  62,  63,
     64,  65,  66,  67,  68,  69,  70,  71,
     72,  73,  74,  75,  76,  77,  78,  79,
     80,  81,  82,  83,  84,  85,  86,  87,
      4,  89,  90,  91,  92,  93,  94,  95,
     96,  97,  98,  99, 100, 101, 102, 103,
    104, 105,   5, 107, 108, 109, 110, 111,
    112, 113, 114, 115, 116, 117, 118, 119,
    120, 121, 122, 123, 124, 125, 126, 127,
    128, 129, 130, 131, 132, 133, 134, 135,
      3, 137, 138, 139, 140, 141, 142, 143,
    144, 145, 146, 147, 148, 149, 150, 151,
    152, 153, 154, 155, 156, 157, 158, 159,
    160, 161, 162, 163, 164, 165, 166, 167,
    168, 169, 170, 171, 172, 173, 174, 175,
    176, 177, 178, 179, 180, 181, 182, 183,
    184, 185, 186, 187, 188, 189, 190, 191,
    192, 193, 194, 195, 196, 197, 198, 199,
    200, 201, 202, 203, 204, 205, 206, 207,
    208, 209, 210, 211, 212, 213, 214,   1,
      2, 245, 246, 247, 248, 249, 250, 251,
    252, 253, 254, 227, 228, 229, 230, 231,
    232, 233, 234, 235, 236, 237, 238, 239,
    240, 241, 242, 243, 244,   9, 218, 219,
    220, 221, 222, 223, 224, 225, 226, 255,
]

LAZY_CONSTANT_GENERATORS = {
    'OKLAB_PALETTE': lambda: np.array([srgb_to_oklab(c) for c in PALETTE]),
    'NP_PALETTE': lambda: np.array(PALETTE),
    'SPECTRA_PALETTE': lambda: {i:to_spectra(*PALETTE[i]) for i in range(256)},
    'PALETTE_IDX': lambda: {p: i for i, p in enumerate(PALETTE)},
}
_LAZY_CONSTANTS = {}


def __getattr__(name: str) -> Any:
    func = LAZY_CONSTANT_GENERATORS.get(name)
    if func is not None:
        value = _LAZY_CONSTANTS.get(name)
        if value is None:
            value = func()
            _LAZY_CONSTANTS[name] = value
        return value
    raise AttributeError(f"module {__name__!r} has no attribute {name!r}")


to_spectra = lambda r, g, b: spectra.rgb(float(r) / 255., float(g) / 255., float(b) / 255.)


def srgb_to_linear(rgb):
    rgb = np.array(rgb) / 255.
    mask = rgb <= 0.04045
    rgb[mask] /= 12.92
    rgb[~mask] = ((rgb[~mask] + 0.055) / 1.055) ** 2.4
    return rgb


def linear_to_srgb(rgb_linear):
    mask = rgb_linear <= 0.0031308
    rgb_linear[mask] *= 12.92
    rgb_linear[~mask] = 1.055 * (rgb_linear[~mask] ** (1 / 2.4)) - 0.055
    return np.rint(np.clip(rgb_linear * 255., 0, 255.))


LRGB_TO_OKLAB_M1 = np.array((
    (0.4122214708, 0.5363325363, 0.0514459929),
    (0.2119034982, 0.6806995451, 0.1073969566),
    (0.0883029595, 0.2817188376, 0.6299787005),
))
LRGB_TO_OKLAB_M2 = np.array((
    (0.2104542553, +0.7936177850, -0.0040720468),
    (1.9779984951, -2.4285922050, +0.4505937099),
    (0.0259040371, +0.7827717662, -0.8086757660),
))


def srgb_to_oklab(rgb):
    rgb_linear = srgb_to_linear(rgb)
    x = LRGB_TO_OKLAB_M1.dot(rgb_linear)
    return LRGB_TO_OKLAB_M2.dot(np.cbrt(x))


OKLAB_TO_LRGB_M1 = np.array((
    (        1.,          1.,          1.),
    (0.39633778, -0.10556135, -0.08948418),
    (0.21580376, -0.06385417, -1.29148555),
))
OKLAB_TO_LRGB_M2 = np.array((
    ( 4.07674166, -1.2684380, -0.00419609),
    (-3.30771159,  2.6097574, -0.70341861),
    ( 0.23096993, -0.3413194,  1.70761470),
))


def oklab_to_srgb(lab):
    x = lab.dot(OKLAB_TO_LRGB_M1)
    rgb = (x ** 3).dot(OKLAB_TO_LRGB_M2)
    return linear_to_srgb(rgb)


def oklab_find_best_colour(x, in_range=SAFE_COLOURS):
    colours = __getattr__('OKLAB_PALETTE').take(in_range, axis=0)
    if len(x.shape) == 1:
        return in_range[np.argmin(np.sum((colours - x) ** 2, axis=1))]
    xi, ci = np.indices((len(x), len(colours)))
    return [in_range[x] for x in np.argmin(np.sum((x[xi] - colours[ci]) ** 2, axis=2), axis=1)]


def oklab_blend(source, tint, ratio=0.5):
    return source * (1 - ratio) + tint * ratio


def srgb_find_best_colour(x, in_range=SAFE_COLOURS):
    return oklab_find_best_colour(srgb_to_oklab(x), in_range=in_range)


def make_palette_image(palette, size=20):
    npimg = np.zeros((16 * size, 16 * size, 3), dtype=np.uint8)
    for i, c in enumerate(palette):
        x = (i % 16) * size
        y = (i // 16) * size
        npimg[y:y + size, x:x + size] = c
    return Image.fromarray(npimg)


def srgb_color_distance(c1, c2):
    rmean = (c1.rgb[0] + c2.rgb[0]) / 2.
    r = c1.rgb[0] - c2.rgb[0]
    g = c1.rgb[1] - c2.rgb[1]
    b = c1.rgb[2] - c2.rgb[2]
    return math.sqrt(
        ((2 + rmean) * r * r) +
        4 * g * g +
        (3 - rmean) * b * b)
